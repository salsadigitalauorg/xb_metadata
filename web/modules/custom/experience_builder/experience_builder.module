<?php

/**
 * @file
 * Hook implementations for Experience Builder's foundational functionality.
 *
 * Other hook implementations live in include files.
 */

// @todo Re-evaluate this when A) tagging a stable release, B) https://www.drupal.org/project/drupal/issues/3398033 is fixed in Drupal core.
ini_set('assert.active', 1);

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\Markup;
use Drupal\experience_builder\Entity\Component;
use Drupal\experience_builder\Plugin\ExperienceBuilder\ComponentSource\GeneratedFieldExplicitInputUxComponentSourceBase;
use Drupal\experience_builder\PropSource\FieldStorageDefinition;

/**
 * Provides allowed values for a 'list_*' field used in an XB StaticPropSource.
 *
 * @see callback_allowed_values_function()
 * @see \Drupal\experience_builder\Plugin\ExperienceBuilder\ComponentSource\GeneratedFieldExplicitInputUxComponentSourceBase::getOptionsForExplicitInputEnumProps()
 */
function experience_builder_load_allowed_values_for_component_prop(FieldStorageDefinitionInterface $xb_field_storage_definition, ?FieldableEntityInterface $entity = NULL, bool &$cacheable = FALSE): array {
  // Allowed values can't be cached, as they not only depend on the prop but
  // also on which component is using it.
  $cacheable = FALSE;
  // We only accept this callback for props, not for real fields.
  assert($xb_field_storage_definition instanceof FieldStorageDefinition);
  // @phpstan-ignore-next-line
  $xb_form_display_options = $xb_field_storage_definition->getDisplayOptions('form')['third_party_settings']['experience_builder'];
  [
    'component_id' => $component_id,
    'component_version' => $component_version,
    'explicit_input_prop_name' => $prop_name,
  ] = $xb_form_display_options;
  $component = Component::load($component_id);

  // @see https://en.wikipedia.org/wiki/Robustness_principle
  if ($component === NULL) {
    return [];
  }

  $component->loadVersion($component_version);

  // StaticPropSources are only used for ComponentSources with a generated input
  // UX using fields.
  $source = $component->getComponentSource();
  assert($source instanceof GeneratedFieldExplicitInputUxComponentSourceBase);

  return $source->getOptionsForExplicitInputEnumProp($prop_name);
}

/**
 * Implements hook_preprocess_HOOK() for regions.
 *
 * @see \Drupal\experience_builder\Render\MainContent\XBPreviewRenderer::prepare()
 */
function experience_builder_preprocess_region(array &$variables):void {
  if (!array_key_exists('#xb_region_preview', $variables['elements'])) {
    // Nothing to do: this is a region being rendered outside of an XB preview
    // context.
    return;
  }

  $region = $variables['region'];
  assert(is_string($region) && strlen($region) >= 1);

  $content = (string) $variables['content'];

  // Additional `content-start` and `content-end` comment annotations to surround just the {{ content }} output
  // to allow XB's UI to more accurately render the region overlays
  $variables['content'] = Markup::create(<<<HTML
<!-- xb-region-content-start-$region -->
$content
<!-- xb-region-content-end-$region -->
HTML);
}

/**
 * Implements hook_preprocess_form_element().
 */
function experience_builder_preprocess_form_element(array &$variables): void {
  if (!isset($variables['label'])) {
    return;
  }

  if (isset($variables['element']['#form_id'])) {
    $variables['label']['#form_id'] = $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function experience_builder_preprocess_html(array &$variables): void {
  $current_route = \Drupal::routeMatch()->getRouteName();
  if ($current_route === 'entity.xb_page.canonical') {
    $variables['attributes']['class'][] = 'xb-page';
  }
}
