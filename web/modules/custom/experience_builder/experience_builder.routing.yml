entity.component.audit:
  path: '/admin/appearance/component/{component}/audit'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ComponentAuditController::audit'
    _title_callback: 'Drupal\experience_builder\Controller\ComponentAuditController::auditTitle'
  requirements:
    _entity_access: 'component.audit'
entity.component.delete_form:
  path: '/admin/appearance/component/delete/{component}'
  defaults:
    _entity_form: 'component.delete'
    _title: 'Delete component'
  requirements:
    _entity_access: 'component.delete'
entity.component.disable:
  path: '/admin/appearance/component/{component}/disable'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ComponentStatusController::performOperation'
    op: disable
  requirements:
    _entity_access: 'component.disable'
    _csrf_token: 'TRUE'
entity.component.enable:
  path: '/admin/appearance/component/{component}/enable'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ComponentStatusController::performOperation'
    op: enable
  requirements:
    _entity_access: 'component.enable'
    _csrf_token: 'TRUE'

experience_builder.api.auto-save.delete:
  path: '/xb/api/v0/auto-saves/{entity_type}/{entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiAutoSaveController::delete'
  requirements:
    _permission: 'publish auto-saves'
  methods: [DELETE]
  options:
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'

experience_builder.api.auto-save.get:
  path: '/xb/api/v0/auto-saves/pending'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiAutoSaveController::get'
  requirements:
    _xb_ui_access: 'TRUE'
  methods: ['GET']
  options:
    _format: 'json'

experience_builder.api.auto-save.post:
  path: '/xb/api/v0/auto-saves/publish'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiAutoSaveController::post'
  requirements:
    _permission: 'publish auto-saves'
  methods: [POST]
  options:
    _format: 'json'

experience_builder.api.config.auto-save.get:
  path: '/xb/api/v0/config/auto-save/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigAutoSaveControllers::get'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    _entity_access: 'xb_config_entity.edit'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API, `Pattern` config entities do
    # not (yet) support auto-save.
    xb_config_entity_type_id: '(js_component|xb_asset_library|staged_config_update)'
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'
  methods: [GET]

experience_builder.api.config.auto-save.get.css:
  path: '/xb/api/v0/auto-saves/css/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigAutoSaveControllers::getCss'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    # Allow a subset: those config entity types that implement XbAssetInterface.
    xb_config_entity_type_id: '(js_component|xb_asset_library)'
    # Must be visible to anybody who can:
    # - create/edit auto-saved ("draft") code components
    # - see auto-saved ("draft") code components, i.e. anybody who can see any preview in the XB UI.
    # @see \Drupal\experience_builder\Hook\ComponentSourceHooks::pageAttachments()
    _xb_ui_access: 'TRUE'
  methods: ['GET']
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'

experience_builder.api.config.auto-save.get.js:
  path: '/xb/api/v0/auto-saves/js/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigAutoSaveControllers::getJs'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    # Allow a subset: those config entity types that implement XbAssetInterface.
    xb_config_entity_type_id: '(js_component|xb_asset_library)'
    # Must be visible to anybody who can:
    # - create/edit auto-saved ("draft") code components
    # - see auto-saved ("draft") code components, i.e. anybody who can see any preview in the XB UI.
    # @see \Drupal\experience_builder\Hook\ComponentSourceHooks::pageAttachments()
    _xb_ui_access: 'TRUE'
  methods: ['GET']
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'

experience_builder.api.config.auto-save.patch:
  path: '/xb/api/v0/config/auto-save/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigAutoSaveControllers::patch'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    _entity_access: 'xb_config_entity.edit'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API, `Pattern` config entities do
    # not (yet) support auto-save.
    xb_config_entity_type_id: '(js_component|xb_asset_library)'
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'
  methods: [PATCH]

experience_builder.api.config.delete:
  path: '/xb/api/v0/config/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigControllers::delete'
  requirements:
    _entity_access: 'xb_config_entity.delete'
    _xb_http_eligible_config_entity: 'TRUE'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API.
    xb_config_entity_type_id: '(pattern|js_component|xb_asset_library)'
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'
    # Indicate that external applications may use this route. For authentication, see `modules/xb_oauth/README.md`.
    xb_external_api: true
  methods: [DELETE]

experience_builder.api.config.get:
  path: '/xb/api/v0/config/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigControllers::get'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    _entity_access: 'xb_config_entity.view'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API.
    xb_config_entity_type_id: '(pattern|js_component|xb_asset_library)'
    # The UI client can fetch all the components the current user has access too, regardless of which kind of XB-enabled
    # entity you're editing.
    _xb_ui_access: 'TRUE'
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'
    # Indicate that external applications may use this route. For authentication, see `modules/xb_oauth/README.md`.
    xb_external_api: true
  methods: [GET]

experience_builder.api.config.list:
  path: '/xb/api/v0/config/{xb_config_entity_type_id}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigControllers::list'
  requirements:
    # Any internal HTTP API-eligible XB config entity type.
    _xb_http_eligible_config_entity: 'TRUE'
    # But deter users from trying to access other config entities via this route: this ensures 404 responses rather than
    # 403.
    # @see \Drupal\Tests\experience_builder\Functional\XbConfigEntityHttpApiTest::testNonXbConfigEntity()
    xb_config_entity_type_id: '(component|pattern|js_component|xb_asset_library)'
    # The UI client can fetch all the components the current user has access too, regardless of which kind of XB-enabled
    # entity you're editing.
    _xb_ui_access: 'TRUE'
  options:
    # Indicate that external applications may use this route. For authentication, see `modules/xb_oauth/README.md`.
    xb_external_api: true
  methods: [GET]
experience_builder.api.config.patch:
  path: '/xb/api/v0/config/{xb_config_entity_type_id}/{xb_config_entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigControllers::patch'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    _entity_access: 'xb_config_entity.update'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API.
    xb_config_entity_type_id: '(pattern|js_component|xb_asset_library)'
  options:
    parameters:
      xb_config_entity:
        type: entity:{xb_config_entity_type_id}
    _format: 'json'
    # Indicate that external applications may use this route. For authentication, see `modules/xb_oauth/README.md`.
    xb_external_api: true
  methods: [PATCH]

experience_builder.api.config.post:
  path: '/xb/api/v0/config/{xb_config_entity_type_id}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiConfigControllers::post'
  requirements:
    _xb_http_eligible_config_entity: 'TRUE'
    # @todo: Use _entity_create_access once dynamic entity types are supported. See https://www.drupal.org/project/drupal/issues/3516775
    _xb_entity_create_access: 'xb_config_entity_type_id'
    # Allow a subset: `Component` config entities are read-only via the internal HTTP API.
    xb_config_entity_type_id: '(pattern|js_component|xb_asset_library)'
  options:
    # Indicate that external applications may use this route. For authentication, see `modules/xb_oauth/README.md`.
    xb_external_api: true
  methods: [POST]

# @todo https://www.drupal.org/i/3498525 should generalize this to all eligible content entity types by using a route callback
experience_builder.api.content.create:
  path: '/xb/api/v0/content/{entity_type}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiContentControllers::post'
  requirements:
    _entity_create_access: 'xb_page:xb_page'
  methods: ['POST']
# @todo https://www.drupal.org/i/3498525 should generalize this to all eligible content entity types by using a route callback
experience_builder.api.content.delete:
  path: '/xb/api/v0/content/xb_page/{xb_page}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiContentControllers::delete'
  requirements:
    _entity_access: 'xb_page.delete'
  options:
    parameters:
      xb_page:
        type: entity:xb_page
    _format: 'json'
  methods: ['DELETE']
# @todo https://www.drupal.org/i/3498525 should generalize this to all eligible content entity types by using a route callback
experience_builder.api.content.list:
  path: '/xb/api/v0/content/{entity_type}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiContentControllers::list'
  requirements:
    _permission: 'edit xb_page'
  methods: [GET]
  options:
    _format: 'json'

# Forms: component instance and content entity.
# @see \Drupal\experience_builder\Theme\XBThemeNegotiator::applies()
experience_builder.api.form.component_inputs:
  path: '/xb/api/v0/form/component-instance/{entity_type}/{entity}'
  defaults:
    _form: 'Drupal\experience_builder\Form\ComponentInputsForm'
    _title: 'Component Inputs Form'
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
  options:
    # The XB equivalent of requesting an AJAX response using `?_wrapper_format`.
    # @see Drupal.Ajax.AJAX_REQUEST_PARAMETER
    # @see \Drupal\Core\Ajax\AjaxResponse
    # @see \Drupal\experience_builder\Render\MainContent\XBTemplateRenderer
    _wrapper_format: 'xb_template'
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
  methods:
    # Used by XB UI to generate this form.
    - PATCH
    # Used by Drupal's AJAX system.
    - POST
experience_builder.api.form.content_entity:
  path: '/xb/api/v0/form/content-entity/{entity_type}/{entity}/{entity_form_mode}'
  defaults:
    # It is not possible to use '_entity_form' as a default because form mode is not taken into account.
    # When '_entity_form' is used as a default with 2 parts, for example 'node.default', the 2nd part is the form
    # operation, not form mode.
    # @see \Drupal\Core\Entity\Enhancer\EntityRouteEnhancer::enhanceEntityForm
    # @see \Drupal\Core\Entity\HtmlEntityFormController::getFormObject
    _controller: 'Drupal\experience_builder\Controller\EntityFormController::form'
    _title: 'Entity Form'
    entity_form_mode: default
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
  options:
    # The XB equivalent of requesting an AJAX response using `?_wrapper_format`.
    # @see Drupal.Ajax.AJAX_REQUEST_PARAMETER
    # @see \Drupal\Core\Ajax\AjaxResponse
    # @see \Drupal\experience_builder\Render\MainContent\XBTemplateRenderer
    _wrapper_format: 'xb_template'
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
  methods:
    # Used by XB UI to generate this form.
    - GET
    # Used by Drupal's AJAX system.
    - POST

experience_builder.api.layout.get:
  path: '/xb/api/v0/layout/{entity_type}/{entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiLayoutController::get'
    # We need a title callback because we use the HTML renderer to generate the preview.
    _title_callback: 'Drupal\experience_builder\Controller\ApiLayoutController::getLabel'
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
  options:
    _xb_use_template_draft: TRUE
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
  methods: [GET]

experience_builder.api.layout.patch:
  path: '/xb/api/v0/layout/{entity_type}/{entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiLayoutController::patch'
    # We need a title callback because we use the HTML renderer to generate the preview.
    _title_callback: 'Drupal\experience_builder\Controller\ApiLayoutController::getLabel'
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
    _format: json
  options:
    _xb_use_template_draft: TRUE
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
  methods: [PATCH]

experience_builder.api.layout.post:
  path: '/xb/api/v0/layout/{entity_type}/{entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiLayoutController::post'
    # We need a title callback because we use the HTML renderer to generate the preview.
    _title_callback: 'Drupal\experience_builder\Controller\ApiLayoutController::getLabel'
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
  options:
    _xb_use_template_draft: TRUE
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
  methods: [POST]

experience_builder.api.log_error:
  path: '/xb/api/v0/log-error'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiLogController'
  requirements:
    _xb_ui_access: 'TRUE'
  methods: ['POST']
  options:
    _format: 'json'

experience_builder.api.staged-update.auto-save.post:
  path: '/xb/api/v0/staged-update/auto-save'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ApiStagedConfigUpdateAutoSaveController::post'
  requirements:
    _xb_entity_create_access: 'staged_config_update'
  methods: [POST]

experience_builder.component.status:
  path: '/admin/appearance/component/status'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ComponentStatusController'
    _title: 'Components status'
  requirements:
    _permission: 'administer themes'

experience_builder.experience_builder:
  path: '/xb/{entity_type}/{entity}'
  defaults:
    _controller: 'Drupal\experience_builder\Controller\ExperienceBuilderController'
    _title: 'Experience Builder'
    entity: NULL
  requirements:
    _xb_component_tree_edit_access: TRUE
    _entity_access: 'entity.update'
  options:
    parameters:
      entity:
        type: entity:{entity_type}
    _format: 'json'
